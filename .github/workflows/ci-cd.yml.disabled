name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: nanoinfluencer-backend
  IMAGE_NAME_FRONTEND: nanoinfluencer-frontend

jobs:
  # Code Quality & Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          cd backend && npm ci
          cd ../frontend-web && npm ci --legacy-peer-deps

      - name: Run ESLint
        run: |
          cd backend && npm run lint
          cd ../frontend-web && npm run lint

      - name: Run Prettier check
        run: |
          cd frontend-web && npm run format -- --check

      - name: Check for security vulnerabilities
        run: |
          npm audit --audit-level moderate
          cd backend && npm audit --audit-level moderate
          cd ../frontend-web && npm audit --audit-level moderate

      - name: Run dependency vulnerability scan
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Run backend tests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test_secret
          JWT_REFRESH_SECRET: test_refresh_secret
        run: cd backend && npm run test:coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend-web && npm ci --legacy-peer-deps

      - name: Run frontend tests
        run: cd frontend-web && npm run test:coverage
        env:
          CI: true

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend-web/coverage/lcov.info
          flags: frontend

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          cd backend && npm ci
          cd ../frontend-web && npm ci --legacy-peer-deps

      - name: Start backend for E2E tests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test_secret
        run: |
          cd backend && npm start &
          sleep 10

      - name: Build frontend for E2E tests
        run: cd frontend-web && npm run build
        env:
          REACT_APP_API_URL: http://localhost:3001/api

      - name: Run E2E tests with Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend-web
          start: npm run start
          wait-on: 'http://localhost:3000, http://localhost:3001/api/health'
          wait-on-timeout: 60
          browser: chrome
          headless: true

      - name: Upload E2E test screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: frontend-web/cypress/screenshots

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        component: [backend, frontend-web]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.component == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-and-push, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            # Navigate to application directory
            cd /opt/nanoinfluencer
            
            # Pull latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            
            # Update docker-compose file
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
            
            # Restart services with zero-downtime deployment
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --no-deps --remove-orphans
            
            # Health check
            sleep 30
            curl -f http://localhost:3001/api/health || exit 1
            curl -f http://localhost:3000/health || exit 1
            
            # Clean up old images
            docker image prune -f

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/api/health
          curl -f ${{ secrets.STAGING_URL }}/health

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            # Navigate to application directory
            cd /opt/nanoinfluencer
            
            # Create backup of current state
            docker-compose -f docker-compose.prod.yml exec postgres pg_dump -U $DB_USER $DB_NAME > backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Pull latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            
            # Update docker-compose file
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
            
            # Rolling deployment
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --no-deps --remove-orphans
            
            # Health check
            sleep 60
            curl -f http://localhost:3001/api/health || exit 1
            curl -f http://localhost:3000/health || exit 1
            
            # Clean up old images
            docker image prune -f

      - name: Run production smoke tests
        run: |
          sleep 60
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health
          curl -f ${{ secrets.PRODUCTION_URL }}/health

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}